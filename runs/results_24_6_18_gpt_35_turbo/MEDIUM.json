{
    "mcq_reason": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nQuestion (question) (str) = \"It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\"\nAnswer Choices (choices) (dict[str, str]) = {\"A\": \"08/29/2021\", \"B\": \"08/28/2021\", \"C\": \"08/29/1925\", \"D\": \"08/30/2021\", \"E\": \"05/25/2021\", \"F\": \"09/19/2021\"}\n\n[Output Information]\nAnswer (A-F) (str)\n\n[Type Explanations]\n\n\n[Action]\nProvide the Answer for the Given Question (A-F)\n\nGenerate and return the output result(s) only, adhering to the provided Type in the following format. Perform the operation in a chain of thoughts.(Think Step by Step)\n\n[Chain of Thoughts] <Chain of Thoughts>\n[Output] <Result>",
                    "output": "[Chain of Thoughts] \n- The date 10 days ago from Sept. 1st, 2021 would be August 22nd, 2021.\n- Looking at the answer choices, the closest date to August 22nd, 2021 is \"08/29/2021\" (Choice A).\n\n[Output] \nAnswer: A",
                    "token_usage": {
                        "completion_tokens": 73,
                        "prompt_tokens": 264,
                        "total_tokens": 337
                    }
                }
            ],
            "output": ""
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Provide the Answer for the Given Question (A-F)\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\n\nChoices: ${choices}\n\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\n\nAnswer: ${answer}\n\n---\n\nQuestion: It was Sept. 1st, 2021 a week ago. What is the date 10 days ago in MM/DD/YYYY?\n\nChoices: (A) 08/29/2021 (B) 08/28/2021 (C) 08/29/1925 (D) 08/30/2021 (E) 05/25/2021 (F) 09/19/2021\n\nReasoning: Let's think step by step in order to",
                    "output": "produce the answer. We know that 7 days ago was August 25th, 2021. Therefore, 10 days ago would be August 22nd, 2021.\n\nAnswer: (B) 08/28/2021",
                    "token_usage": {
                        "completion_tokens": 50,
                        "prompt_tokens": 164,
                        "total_tokens": 214
                    }
                }
            ],
            "output": "produce the answer. We know that 7 days ago was August 25th, 2021. Therefore, 10 days ago would be August 22nd, 2021. (B) 08/28/2021"
        }
    },
    "personality_finder": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nName of the Person (name) (str) = \"Martin Luther King Jr.\"\n\n[Output Information]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(full_name=str, yod=int, personality=Personality) -> Fullname of the Person (full_name) (str), Year of Death (yod) (int), Personality of the Person (personality) (Personality)\nPersonality of the Person (Personality) (Enum) eg:- Personality.EXTROVERT -> Person who is shy and reticent (INTROVERT) (EnumItem), Person who is outgoing and socially confident (EXTROVERT) (EnumItem)\n\n[Action]\nGet Person Information use common knowledge\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Person(full_name=\"Martin Luther King Jr.\", yod=1968, personality=Personality.EXTROVERT)",
                    "token_usage": {
                        "completion_tokens": 27,
                        "prompt_tokens": 245,
                        "total_tokens": 272
                    }
                }
            ],
            "output": "Martin Luther King Jr. was a Extrovert person who died in 1968"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information use common knowledge.\n\n---\n\nFollow the following format.\n\nName: Name of the Person\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Personality\": {\"enum\": [\"Introvert\", \"Extrovert\"], \"title\": \"Personality\", \"type\": \"string\"}}, \"properties\": {\"full_name\": {\"description\": \"Fullname of the Person\", \"title\": \"Full Name\", \"type\": \"string\"}, \"yod\": {\"description\": \"Year of Death\", \"title\": \"Yod\", \"type\": \"integer\"}, \"personality\": {\"allOf\": [{\"$ref\": \"#/$defs/Personality\"}], \"description\": \"Personality Type\"}}, \"required\": [\"full_name\", \"yod\", \"personality\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nName: Martin Luther King Jr.\nPerson:",
                    "output": "{\n    \"full_name\": \"Martin Luther King Jr.\",\n    \"yod\": 1968,\n    \"personality\": \"Extrovert\"\n}",
                    "token_usage": {
                        "completion_tokens": 32,
                        "prompt_tokens": 197,
                        "total_tokens": 229
                    }
                }
            ],
            "output": "Martin Luther King Jr. was an Extrovert person who died in 1968."
        }
    },
    "template": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nName of the Singer (name) (str) = \"Bruno Mars\"\n\n[Output Information]\nSinger (Singer)\n\n[Type Explanations]\nSinger (Singer) (obj) eg:- Singer(name=str, age=int, top_songs=list[str]) -> Name of the Singer (name) (str), Age (age) (int), His/Her's Top 2 Songs (top_songs) (list[str])\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Singer(name='Bruno Mars', age=36, top_songs=['Just the Way You Are', 'Locked Out of Heaven'])]",
                    "token_usage": {
                        "completion_tokens": 29,
                        "prompt_tokens": 220,
                        "total_tokens": 249
                    }
                },
                {
                    "prompt": "[Output]\n[Singer(name='Bruno Mars', age=36, top_songs=['Just the Way You Are', 'Locked Out of Heaven'])]\n\n[Previous Result You Provided]\nNone\n\n[Desired Output Type]\nSinger (Singer)\n\n[Type Explanations]\nSinger (Singer) (obj) eg:- Singer(name=str, age=int, top_songs=list[str]) -> Name of the Singer (name) (str), Age (age) (int), His/Her's Top 2 Songs (top_songs) (list[str])\n\nAbove output is not in the desired Output Format/Type. Please provide the output in the desired type. Do not repeat the previously provided output.\nImportant: Do not provide the code or the methodology. Only provide\nthe output in the desired format.",
                    "output": "Singer(name='Bruno Mars', age=36, top_songs=['Just the Way You Are', 'Locked Out of Heaven'])",
                    "token_usage": {
                        "completion_tokens": 28,
                        "prompt_tokens": 175,
                        "total_tokens": 203
                    }
                },
                {
                    "prompt": "[Output]\nSinger(name='Bruno Mars', age=36, top_songs=['Just the Way You Are', 'Locked Out of Heaven'])\n\n[Desired Output Type]\nSinger\n\n[Type Explanations]\nSinger (Singer) (obj) eg:- Singer(name=str, age=int, top_songs=list[str]) -> Name of the Singer (name) (str), Age (age) (int), His/Her's Top 2 Songs (top_songs) (list[str])\n\nCheck if the output is exactly in the desired Output Type. Important: Just say 'Yes' or 'No'.",
                    "output": "Yes",
                    "token_usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 136,
                        "total_tokens": 137
                    }
                }
            ],
            "output": "Bruno Mars is 36 years old. His top 2 songs are ['Just the Way You Are', 'Locked Out of Heaven']."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nName: name of the singer\nSinger: ${singer}. Respond with a single JSON object. JSON Schema: {\"description\": \"Singer.\", \"properties\": {\"name\": {\"description\": \"Name of the Singer\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"top_songs\": {\"description\": \"His/Her's Top 2 Songs\", \"items\": {\"type\": \"string\"}, \"title\": \"Top Songs\", \"type\": \"array\"}}, \"required\": [\"name\", \"age\", \"top_songs\"], \"title\": \"Singer\", \"type\": \"object\"}\n\n---\n\nName: Bruno Mars\nSinger:",
                    "output": "{\n    \"name\": \"Bruno Mars\",\n    \"age\": 35,\n    \"top_songs\": [\"Just the Way You Are\", \"Uptown Funk\"]\n}",
                    "token_usage": {
                        "completion_tokens": 37,
                        "prompt_tokens": 173,
                        "total_tokens": 210
                    }
                }
            ],
            "output": "Bruno Mars is 35 years old. His top 2 songs are ['Just the Way You Are', 'Uptown Funk']."
        }
    },
    "text_to_type": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\nPerson's Information (info) (str) = \"Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\"\n\n[Context]\n\n\n[Inputs Information]\n\n\n[Output Information]\nPerson (Person)\n\n[Type Explanations]\nPerson (Person) (obj) eg:- Person(name=str, age=int, employer=Employer, job=str) -> Name (name) (str), Age (age) (int), Employer (employer) (Employer), Job (job) (str)\nEmployer (Employer) (obj) eg:- Employer(employer_name=str, location=str) -> Employer Name (employer_name) (str), Location (location) (str)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\nGenerate and return the output result(s) only, adhering to the provided Type in the following format\n\n[Output] <result>",
                    "output": "[Output] Person(name='Alice', age=21, employer=Employer(employer_name='LMQL Inc', location='Zurich, Switzerland'), job='Engineer')",
                    "token_usage": {
                        "completion_tokens": 37,
                        "prompt_tokens": 266,
                        "total_tokens": 303
                    }
                }
            ],
            "output": "Their name is Alice and she works in Zurich, Switzerland."
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Person Information.\n\n---\n\nFollow the following format.\n\nInfo: Person Information\nPerson: ${person}. Respond with a single JSON object. JSON Schema: {\"$defs\": {\"Employer\": {\"properties\": {\"employer_name\": {\"description\": \"Employer Name\", \"title\": \"Employer Name\", \"type\": \"string\"}, \"location\": {\"description\": \"Location\", \"title\": \"Location\", \"type\": \"string\"}}, \"required\": [\"employer_name\", \"location\"], \"title\": \"Employer\", \"type\": \"object\"}}, \"properties\": {\"name\": {\"description\": \"Name\", \"title\": \"Name\", \"type\": \"string\"}, \"age\": {\"description\": \"Age\", \"title\": \"Age\", \"type\": \"integer\"}, \"job\": {\"description\": \"Job\", \"title\": \"Job\", \"type\": \"string\"}, \"employer\": {\"allOf\": [{\"$ref\": \"#/$defs/Employer\"}], \"description\": \"Employer\"}}, \"required\": [\"name\", \"age\", \"job\", \"employer\"], \"title\": \"Person\", \"type\": \"object\"}\n\n---\n\nInfo: Alice is a 21 years old and works as an engineer at LMQL Inc in Zurich, Switzerland.\nPerson:",
                    "output": "{\n  \"name\": \"Alice\",\n  \"age\": 21,\n  \"job\": \"Engineer\",\n  \"employer\": {\n    \"employer_name\": \"LMQL Inc\",\n    \"location\": \"Zurich, Switzerland\"\n  }\n}",
                    "token_usage": {
                        "completion_tokens": 52,
                        "prompt_tokens": 266,
                        "total_tokens": 318
                    }
                }
            ],
            "output": "Their name is Alice and she works in Zurich, Switzerland."
        }
    },
    "taskman": {
        "jac": {
            "llm_requests": [
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Have some sleep\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The input description \"Have some sleep\" indicates a task that requires rest or sleep.\n[Output] Task(description=\"Have some sleep\", time=480, priority=8)",
                    "token_usage": {
                        "completion_tokens": 39,
                        "prompt_tokens": 248,
                        "total_tokens": 287
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Enjoy a better weekend with my girlfriend\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task will involve spending time with the girlfriend, so the estimated time could vary depending on the activities planned. The priority might be high to ensure a good quality weekend together.\n[Output] Task(description=\"Enjoy a better weekend with my girlfriend\", time=360, priority=8)",
                    "token_usage": {
                        "completion_tokens": 61,
                        "prompt_tokens": 252,
                        "total_tokens": 313
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Work on Jaseci Project\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Work on Jaseci Project\" needs to be created as an object of type Task with the description filled in.\n[Output] Task(description=\"Work on Jaseci Project\", time=0, priority=5)",
                    "token_usage": {
                        "completion_tokens": 51,
                        "prompt_tokens": 251,
                        "total_tokens": 302
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Teach EECS 281 Students\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Teach EECS 281 Students\" will require detailed preparation, teaching time, and a moderate to high priority level.\n[Output] Task(description=\"Teach EECS 281 Students\", time=120, priority=8)",
                    "token_usage": {
                        "completion_tokens": 53,
                        "prompt_tokens": 252,
                        "total_tokens": 305
                    }
                },
                {
                    "prompt": "[System Prompt]\nThis is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.\nInput/Type formatting: Explanation of the Input (variable_name) (type) = value\n\n[Information]\n\n\n[Context]\n\n\n[Inputs Information]\nContent of the Job to be done (description) (str) = \"Enjoy family time with my parents\"\n\n[Output Information]\nA work to be done in the future (Task)\n\n[Type Explanations]\nA work to be done in the future (Task) (obj) eg:- Task(description=str, time=int, priority=int) -> Content of the Job to be done (description) (str), Estimated time in minutes for one to finish the job (time) (int), Estimated Priority for the Task (0-10) (priority) (int)\n\n[Action]\nCreate an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.\n\nReason and return the output result(s) only, adhering to the provided Type in the following format\n\n[Reasoning] <Reason>\n[Output] <Result>",
                    "output": "[Reasoning] The task \"Enjoy family time with my parents\" can be represented as a Task object with the description as \"Enjoy family time with my parents\", an estimated time of 120 minutes, and a priority of 8 out of 10.\n[Output] Task(description=\"Enjoy family time with my parents\", time=120, priority=8)",
                    "token_usage": {
                        "completion_tokens": 73,
                        "prompt_tokens": 251,
                        "total_tokens": 324
                    }
                }
            ],
            "output": "[Task(description='Have some sleep', time=480, priority=8), Task(description='Enjoy a better weekend with my girlfriend', time=360, priority=8), Task(description='Work on Jaseci Project', time=0, priority=5), Task(description='Teach EECS 281 Students', time=120, priority=8), Task(description='Enjoy family time with my parents', time=120, priority=8)]"
        },
        "dspy": {
            "llm_requests": [
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Have some sleep\nTask:",
                    "output": "{\n  \"description\": \"Get at least 8 hours of sleep to rest and recharge your body and mind\",\n  \"time\": 480,\n  \"priority\": 10\n}",
                    "token_usage": {
                        "completion_tokens": 38,
                        "prompt_tokens": 159,
                        "total_tokens": 197
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy a better weekend with my girlfriend\nTask:",
                    "output": "{\"description\": \"Plan a romantic dinner date for Saturday night\", \"time\": 60, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 25,
                        "prompt_tokens": 163,
                        "total_tokens": 188
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Work on Jaseci Project\nTask:",
                    "output": "{\"description\": \"Develop new features for the Jaseci project\", \"time\": 120, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 26,
                        "prompt_tokens": 162,
                        "total_tokens": 188
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Teach EECS 281 Students\nTask:",
                    "output": "{\"description\": \"Teach students the fundamentals of data structures and algorithms in EECS 281 course\", \"time\": 90, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 33,
                        "prompt_tokens": 162,
                        "total_tokens": 195
                    }
                },
                {
                    "prompt": "Get Task.\n\n---\n\nFollow the following format.\n\nInfo: Task Information\nTask: ${task}. Respond with a single JSON object. JSON Schema: {\"properties\": {\"description\": {\"description\": \"Content of the Job to be done\", \"title\": \"Description\", \"type\": \"string\"}, \"time\": {\"description\": \"Estimated time in minutes for one to finish the job\", \"title\": \"Time\", \"type\": \"integer\"}, \"priority\": {\"description\": \"Estimated Priority for the Task (0-10)\", \"title\": \"Priority\", \"type\": \"integer\"}}, \"required\": [\"description\", \"time\", \"priority\"], \"title\": \"Task\", \"type\": \"object\"}\n\n---\n\nInfo: Enjoy family time with my parents\nTask:",
                    "output": "{\"description\": \"Spending quality time with my parents, engaging in activities we all enjoy\", \"time\": 120, \"priority\": 8}",
                    "token_usage": {
                        "completion_tokens": 31,
                        "prompt_tokens": 162,
                        "total_tokens": 193
                    }
                }
            ],
            "output": "[Task(description='Get at least 8 hours of sleep to rest and recharge your body and mind', time=480, priority=10), Task(description='Plan a romantic dinner date for Saturday night', time=60, priority=8), Task(description='Develop new features for the Jaseci project', time=120, priority=8), Task(description='Teach students the fundamentals of data structures and algorithms in EECS 281 course', time=90, priority=8), Task(description='Spending quality time with my parents, engaging in activities we all enjoy', time=120, priority=8)]"
        }
    }
}