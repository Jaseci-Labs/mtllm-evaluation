Input Prompt:
 
[System Prompt]
This is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.
Input/Type formatting: Explanation of the Input (variable_name) (type) = value


[Information]


[Context]


[Inputs Information]
Last Played Levels (last_levels) (list) = []
Difficulty of the New Level (difficulty) (int) = 1
Width of the Level (level_width) (int) = 20
Height of the Level (level_height) (int) = 20

[Output Information]
Next Level (Level)

[Type Explanations]
Game Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)

[Action]
Create the Next Level

Generate and return the output result(s) only, adhering to the provided Type in the following format

[Output] <result>

---

[Output] 
Output:
 [Output] Level(name="New Level", difficulty=difficulty, width=level_width, height=level_height, num_wall=level_width*level_height//2, num_enemies=level_width//2, time_countdown=60, n_retries_allowed=3)
CompletionUsage(completion_tokens=53, prompt_tokens=310, total_tokens=363)
Input Prompt:
 
[System Prompt]
This is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.
Input/Type formatting: Explanation of the Input (variable_name) (type) = value


[Information]


[Context]


[Inputs Information]
Level of the Map (level) (Level) = Level(name="New Level", difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3)

[Output Information]
Map of the Level (Map)

[Type Explanations]
Game Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)
Map of the Level (Map) (obj) eg:- Map(level=Level, walls=list[Wall], small_obstacles=list[Position], enemies=list[Position], player_pos=Position) -> Level of the Map (level) (Level), Walls in the Map Other than Edges (walls) (list[Wall]), Obstacles in the Map (small_obstacles) (list[Position]), Enemies in the Map (enemies) (list[Position]), Player Position in the Map (player_pos) (Position)
Position (Position) (obj) eg:- Position(x=int, y=int) -> X Coordinate (x) (int), Y Coordinate (y) (int)
Wall (Wall) (obj) eg:- Wall(start_pos=Position, end_pos=Position) -> Start Position of the Wall (start_pos) (Position), End Position of the Wall (end_pos) (Position)

[Action]
Create an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.

Generate and return the output result(s) only, adhering to the provided Type in the following format

[Output] <result>

---

[Output] 
Output:
 [Output] Map(level=Level(name="New Level", difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3), walls=[Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=20, y=0)), Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=0, y=20)), Wall(start_pos=Position(x=20, y=0), end_pos=Position(x=20, y=20)), Wall(start_pos=Position(x=0, y=20), end_pos=Position(x=20, y=20)), Wall(start_pos=Position(x=1, y=2), end_pos=Position(x=3, y=4)), Wall(start_pos=Position(x=6, y=7), end_pos=Position(x=8, y=9)), Wall(start_pos=Position(x=11, y=12), end_pos=Position(x=13, y=14)), Wall(start_pos=Position(x=16, y=17), end_pos=Position(x=18, y=19)), Wall(start_pos=Position(x=10, y=10), end_pos=Position(x=12, y=12))], small_obstacles=[Position(x=5, y=5), Position(x=9, y=9), Position(x=13, y=13), Position(x=17, y=17)], enemies=[Position(x=2, y=2), Position(x=4, y=4), Position(x=6, y=8), Position(x=10, y=11), Position(x=14, y=15), Position(x=18, y=19)], player_pos=Position(x=1, y=1))
CompletionUsage(completion_tokens=381, prompt_tokens=520, total_tokens=901)
Level(name='New Level', difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3)
BBBBBBBBBBBBBBBBBBBBBB
BP..................BB
BBEB................BB
BBBB................BB
BBBBE...............BB
B....B..............BB
B...................BB
B.....BBB...........BB
B.....EBB...........BB
B.....BBBB..........BB
B.........BBB.......BB
B.........EBB.......BB
B.........BBBB......BB
B..........BBB......BB
B..........BBB......BB
B.............E.....BB
B...................BB
B...............BBB.BB
B...............BBB.BB
B...............BBE.BB
BBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBBBBBBBBBBBBBBB
Input Prompt:
 
[System Prompt]
This is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.
Input/Type formatting: Explanation of the Input (variable_name) (type) = value


[Information]


[Context]


[Inputs Information]
Last Played Levels (last_levels) (list) = [Level(name="New Level", difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3)]
Difficulty of the New Level (difficulty) (int) = 1
Width of the Level (level_width) (int) = 20
Height of the Level (level_height) (int) = 20

[Output Information]
Next Level (Level)

[Type Explanations]
Game Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)

[Action]
Create the Next Level

Generate and return the output result(s) only, adhering to the provided Type in the following format

[Output] <result>

---

[Output] 
Output:
 [Output] Level(name="New Level", difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3)
CompletionUsage(completion_tokens=42, prompt_tokens=352, total_tokens=394)
Input Prompt:
 
[System Prompt]
This is an operation you must perform and return the output values. Neither, the methodology, extra sentences nor the code are not needed.
Input/Type formatting: Explanation of the Input (variable_name) (type) = value


[Information]


[Context]


[Inputs Information]
Level of the Map (level) (Level) = Level(name="New Level", difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3)

[Output Information]
Map of the Level (Map)

[Type Explanations]
Game Level (Level) (obj) eg:- Level(name=str, difficulty=int, width=int, height=int, num_wall=int, num_enemies=int, time_countdown=int, n_retries_allowed=int) -> Name of the Level (name) (str), Difficulty of the Level (difficulty) (int), Width of the Map (width) (int), Height of the Map (height) (int), Number of Walls in the Map (num_wall) (int), Number of Enemies in the Map (num_enemies) (int), Time Countdown of the Level (time_countdown) (int), Number of Retries Allowed (n_retries_allowed) (int)
Map of the Level (Map) (obj) eg:- Map(level=Level, walls=list[Wall], small_obstacles=list[Position], enemies=list[Position], player_pos=Position) -> Level of the Map (level) (Level), Walls in the Map Other than Edges (walls) (list[Wall]), Obstacles in the Map (small_obstacles) (list[Position]), Enemies in the Map (enemies) (list[Position]), Player Position in the Map (player_pos) (Position)
Position (Position) (obj) eg:- Position(x=int, y=int) -> X Coordinate (x) (int), Y Coordinate (y) (int)
Wall (Wall) (obj) eg:- Wall(start_pos=Position, end_pos=Position) -> Start Position of the Wall (start_pos) (Position), End Position of the Wall (end_pos) (Position)

[Action]
Create an object of the specified type, using the specifically  provided input value(s) and look up any missing attributes from reliable online sources to fill them in accurately.

Generate and return the output result(s) only, adhering to the provided Type in the following format

[Output] <result>

---

[Output] 
Output:
 [Output] Map(level=Level(name="New Level", difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3), walls=[Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=20, y=0)), Wall(start_pos=Position(x=0, y=0), end_pos=Position(x=0, y=20)), Wall(start_pos=Position(x=20, y=0), end_pos=Position(x=20, y=20)), Wall(start_pos=Position(x=0, y=20), end_pos=Position(x=20, y=20))], small_obstacles=[], enemies=[Position(x=2, y=2), Position(x=4, y=4), Position(x=6, y=6), Position(x=8, y=8), Position(x=10, y=10), Position(x=12, y=12), Position(x=14, y=14), Position(x=16, y=16), Position(x=18, y=18), Position(x=20, y=20)], player_pos=Position(x=10, y=10))
CompletionUsage(completion_tokens=256, prompt_tokens=520, total_tokens=776)
Level(name='New Level', difficulty=1, width=20, height=20, num_wall=200, num_enemies=10, time_countdown=60, n_retries_allowed=3)
BBBBBBBBBBBBBBBBBBBBBB
B...................BB
B.E.................BB
B...................BB
B...E...............BB
B...................BB
B.....E.............BB
B...................BB
B.......E...........BB
B...................BB
B.........P.........BB
B...................BB
B...........E.......BB
B...................BB
B.............E.....BB
B...................BB
B...............E...BB
B...................BB
B.................E.BB
B...................BB
BBBBBBBBBBBBBBBBBBBBEB
BBBBBBBBBBBBBBBBBBBBBB
